%-- 2018-08-29 오전 10:32 --%
ls
%-- 2018-08-29 오후 3:39 --%
cd
cd \
cd Users\minyoung\Desktop\m_tree\
conn = database('dbdemo','','');
help database
edit test.m
edit test2.m
dbfile = fullfile(pwd,'kospi.db');
conn = sqlite(dbfile,'create');
dbfile = fullfile(pwd,'kospi.db');
conn = sqlite(dbfile,'create');
result = license('test','image processing toolbox')
result = isToolboxAvailable('image processing toolbox','error');
result = license('test','signal processing toolbox')
%-- 2018-08-29 오후 5:08 --%
help toolbox_path_cache
%-- 2018-08-29 오후 5:42 --%
dbfile = fullfile(pwd,'tutorial.db');
conn = sqlite(dbfile,'create');
s = toolboxdir('control')
license( 'test', 'Signal_Toolbox' )
license( 'test', 'Wavelet_Toolbox' )
ver
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('C:\Yair\Data\IGdb 2017-11-13.sqlite'));
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('C:\Yair\Data\IGdb 2017-11-13.sqlite'));
db.open;
% Prepare an SQL query statement
stmt = db.prepare(['select * from data_table where ' conditionStr]);
cd Users\minyoung\Desktop\m_tree\
cd c:\Users\minyoung\Desktop\m_tree\
clc
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
% Prepare an SQL query statement
stmt = db.prepare(['select * from data_table where ' conditionStr]);
% Step through the result set rows
row = 1;
while stmt.step
numericValues(row) = stmt.columnInt(0);    % column #0
stringValues{row}  = stmt.columnString(1); % column #1
end
edit db_open.m
clc
ver
%-- 2018-08-29 오후 5:53 --%
ver
Financial Toolbox
doc Financial Toolbox
%-- 2018-08-29 오후 10:35 --%
dbfile = fullfile(pwd,'kospi.db');
conn = sqlite(dbfile,'create');
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
asdf
clc
db = com.almworks.sqlite4java.SQLiteConnection('kospi.db');
db.open;
clc
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
dbfile = fullfile(pwd,'tutorial.db');
conn = sqlite(dbfile,'create');
edit SQLiteWorkflow.m.
edit SQLiteWorkflow.m
inventoryTable_data = fetch(db,'SELECT * FROM inventoryTable');
ver
clc
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
% Prepare an SQL query statement
stmt = db.prepare(['select * from data_table where ' 'Volume']);
% Step through the result set rows
row = 1;
while stmt.step
numericValues(row) = stmt.columnInt(0);    % column #0
stringValues{row}  = stmt.columnString(1); % column #1
end
% Cleanup
stmt.dispose
db.dispose
clc
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
% Prepare an SQL query statement
stmt = db.prepare(['select * from 000020 where ' 'Volume']);
% Step through the result set rows
row = 1;
while stmt.step
numericValues(row) = stmt.columnInt(0);    % column #0
stringValues{row}  = stmt.columnString(1); % column #1
end
% Cleanup
stmt.dispose
db.dispose
clc
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
% Prepare an SQL query statement
stmt = db.prepare(['select * from 000020 where Volume']);
% Step through the result set rows
row = 1;
while stmt.step
numericValues(row) = stmt.columnInt(0);    % column #0
stringValues{row}  = stmt.columnString(1); % column #1
end
% Cleanup
stmt.dispose
db.dispose
clc
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
% Prepare an SQL query statement
stmt = db.prepare(['select * from data_table where ' conditionStr]);
% Step through the result set rows
row = 1;
while stmt.step
numericValues(row) = stmt.columnInt(0);    % column #0
stringValues{row}  = stmt.columnString(1); % column #1
end
% Cleanup
stmt.dispose
db.dispose
clc
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
conditionStr = 'Volume';
% Prepare an SQL query statement
stmt = db.prepare(['select * from data_table where ' conditionStr]);
% Step through the result set rows
row = 1;
while stmt.step
numericValues(row) = stmt.columnInt(0);    % column #0
stringValues{row}  = stmt.columnString(1); % column #1
end
% Cleanup
stmt.dispose
db.dispose
clc
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
conditionStr = 'Volume';
% Prepare an SQL query statement
stmt = db.prepare(['select * from 000020 where ' conditionStr]);
% Step through the result set rows
row = 1;
while stmt.step
numericValues(row) = stmt.columnInt(0);    % column #0
stringValues{row}  = stmt.columnString(1); % column #1
end
% Cleanup
stmt.dispose
db.dispose
clc
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
conditionStr = 'Volume';
% Prepare an SQL query statement
stmt = db.prepare(['select * from "000020" where ' conditionStr]);
% Step through the result set rows
row = 1;
while stmt.step
numericValues(row) = stmt.columnInt(0);    % column #0
stringValues{row}  = stmt.columnString(1); % column #1
end
% Cleanup
stmt.dispose
db.dispose
clc
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
conditionStr = 'Volume';
% Prepare an SQL query statement
stmt = db.prepare(['select * from kakao where ' conditionStr]);
% Step through the result set rows
row = 1;
while stmt.step
numericValues(row) = stmt.columnInt(0);    % column #0
stringValues{row}  = stmt.columnString(1); % column #1
end
% Cleanup
stmt.dispose
db.dispose
clc
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
conditionStr = 'Volume';
% Prepare an SQL query statement
stmt = db.prepare(['select Volume from 000020']);
% Step through the result set rows
row = 1;
while stmt.step
numericValues(row) = stmt.columnInt(0);    % column #0
stringValues{row}  = stmt.columnString(1); % column #1
end
% Cleanup
stmt.dispose
db.dispose
clc
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
conditionStr = 'Volume';
% Prepare an SQL query statement
stmt = db.prepare(['select Volume from ' int2str('000020')]);
% Step through the result set rows
row = 1;
while stmt.step
numericValues(row) = stmt.columnInt(0);    % column #0
stringValues{row}  = stmt.columnString(1); % column #1
end
% Cleanup
stmt.dispose
db.dispose
clc
db = com.almworks.sqlite4java.SQLiteConnection(java.io.File('kospi.db'));
db.open;
conditionStr = 'Volume';
% Prepare an SQL query statement
stmt = db.prepare(['select * from kospi where ' conditionStr]);
% Step through the result set rows
row = 1;
while stmt.step
numericValues(row) = stmt.columnInt(0);    % column #0
stringValues{row}  = stmt.columnString(1); % column #1
end
% Cleanup
stmt.dispose
db.dispose
datasource = 'MS SQL Server Auth';
conn = database(datasource,'','')
selectquery = 'SELECT * FROM inventoryTable';
data = select(conn,selectquery);
data(1:3,:)
dir
dir name
listing = dir(name)
edit parser_csv.m
dir name
dir
listing = dir('./data')
listing.name
edit parser_csv.m
files = dir('./data/kospi-kosdaq-csv')
files.name
files = dir('./data/kospi-kosdaq-csv/kospi')
files.name
files = dir('./data/kospi-kosdaq-csv/kospi')
[filepath,name,ext] = fileparts(files.name)
filepath.name
filepath
name
size(files)
size(files,1)
size(1:size(files,1))
files.name(i)
i = 1
files.name(i)
files.name{i}
files.name
type(files.name)
files.name{1}
files.name{2}
files.name
files.name{2}
v
file_name = files.name;
file_name
value = getfield(files, 'name')
value
value = getfield(files, 'name', {':'})
files.name
files = dir('./data/kospi-kosdaq-csv/kospi');
for k = 1:length(files)
file_name = files(k).name;
[filepath,name,ext] = fileparts(file_name);
name
end
type(name)
stock = cell(length(files),2);
stock
size(stock)
files = dir('./data/kospi-kosdaq-csv/kospi');
stock = cell(length(files),2);
for k = 1:length(files)
file_name = files(k).name;
[filepath,name,ext] = fileparts(file_name);
stock{k,1} = name;
end
stock
parser_csv
file_name
files(k).name
files(k)
files(2).name
files(3).name
parser_csv
file_name
files
parser_csv
M
['./data/kospi-kosdaq-csv/kospi/', file_name]
parser_csv
M = csvread(['./data/kospi-kosdaq-csv/kospi/', file_name], 2, 6);
M
size(M)
M = csvread(['./data/kospi-kosdaq-csv/kospi/', file_name], 1, 5);
M
size(M)
size(M,1)
M(1,:)
M(:,1)
plot(M(:,1))
M = csvread(['./data/kospi-kosdaq-csv/kospi/', file_name], 1, 0);
M(:,1)
stock{k,0}
stock{k,1}
stock{k,2}
name
str2int(name)
str2num(name)
stock{k,0} = str2num(name);
stock{k,1} = M(:,1);
stock{k,1} = str2num(name);
stock{k,2} = M(:,1);
name
parser_csv
save('stock.mat', 'stock')
parser_csv
M
M(:,0)
M(:,1)
max(M(:,1))
data = readtable(['./data/kospi-kosdaq-csv/kospi/', file_name]);
data
size(data0
size(data)
data(:,1)
d2 = yyyymmdd(data(:,1))
yyyymmdd
parser_csv
stock{1,1}
stock{2,1}
parser_csv
stock
find(stock)
help find
parser_csv
str2num(name)
k
length(files)
parser_csv
save('stock.mat', 'code', 'price');
code
size(code)
price
find(code == 012450)
index = find(code == 012450)
price{index}
plot(price{index}
plot(price{index}))plot(price{index})
plot(price{index})
price{index}
size(price{index})
length(price{index})
length(price)
length(price{k})
parser_csv
length(price)
index
length(price{k})
length(price{4})
length(price{6})
parser_csv
sum
length(price)
price{index}
parser_csv
C1
[~,I] = max(abs(C2))
[~,I] = max(abs(C1))
max(abs(C1))
[~,I] = max(abs(C1))
parser_csv
T1
size(T1)
parser_csv
parser_csv
diff(price{k})
parser_csv
T1
S
size(S)
k
parser_csv
[~,I] = max(abs(C2));
SampleDiff = lag2(I)
[~,I] = max(abs(C1));
SampleDiff = lag1(I)
max(abs(C1))
parser_csv
max(abs(C1))/10^6
parser_csv
(abs(C1))/10^6
parser_csv
Amplitude
max(Amplitude)
code(Amplitude == max(Amplitude))Amplitude
code(Amplitude == max(Amplitude))*Amplitudecode(Amplitude == max(Amplitude))
code(Amplitude == max(Amplitude))
sort(Amplitude)
help sort
sort(Amplitude)'
sort(Amplitude)
[out,idx] = sort(Amplitude);
idx
idx'
code(idx')
[out,idx] = sort(Amplitude);
code(idx)
% plot(price{index})
[out,idx'] = sort(Amplitude);
code(idx)
[out,idx] = sort(Amplitude);
code(idx')
code(idx)
[out,idx] = sort(Amplitude);
best_stock = code(idx);
plot(price{index})
best_stock
best_stock'
parser_csv
best_stock
best_stock(1)
code == best_stock(1)
find(code == best_stock(1))
plot(price{index}, 'k');
hold on;
plot(price{find(code == best_stock(1))}, 'r');
plot(price{find(code == best_stock(2))}, 'g');
plot(price{find(code == best_stock(2))}, 'b');
parser_csv
price{index}
max(price{index})
parser_csv
best_stock(1:3)
parser_csv
code == best_stock(2)
find(code == best_stock(2))
code(58)
code(best_stock(1))
best_stock(1)
best_stock(2)
best_stock(3)
best_stock(1:5)
parser_csv
best_stock(1:4)
parser_csv
best_stock = flipud(code(idx));
code(idx)
idx
flipud(idx)
parser_csv
SampleDiff(flipud(idx))
SampleDiff
parser_csv
price{index}
size(price{index})
%-- 2018-08-30 오전 9:50 --%
run('C:\Users\minyoung\Desktop\xcorr_price_anal.m')
edit
run('C:\Users\minyoung\Desktop\m_tree\git_hub\m_tree\src\xcorr_price_anal.m')
history
edit xcorr_anal.m
xcorr_anal
size(stock)
edit  history.m
clear all
load stock.mat
find(code == 012450)
xcorr_anal
price{100}
size(price{100})
xcorr_anal
help alignsignals
xcorr_anal
price{105}
size(price{105})
xcorr_anal
length(code)
xcorr_anal
plot(i);
plot(Amplitude);
Amplitude
Amplitude'
xcorr_anal
find(code == 012450)
xcorr_anal
help sort
size(price{find(code == 012450)})
size(price{find(code == 012450)}(:,1))
size(price{find(code == 012450)}(end-365:end,1))
size(price{find(code == 012450)}(end-300:end,1))
xcorr_anal
size(price{i})
length(price{i})
xcorr_anal
price{find(code == 012450)}(end-300:end,1)
max(price{find(code == 012450)}(end-300:end,1))
S = price{find(code == 012450)}(end-300:end,1);
S = S/max(S);
xcorr_anal
best_stock(1:5)
xcorr_anal
C1
size(C1)
C1(2)
xcorr_anal
plot(Amplitude(flipud(idx)), 'x');
xcorr_anal
uiopen('C:\Users\minyoung\Desktop\m_tree\git_hub\m_tree\src\code.py',1)
clc
clear all
close all
uiopen('C:\Users\minyoung\Desktop\m_tree\git_hub\m_tree\src\code.py',1)
data = readtable('./data/kospi_code.csv');
data = readtable('/data/kospi_code.csv');
data = readtable('./data/kospi_code.csv');
data
size(data)
help readtable
data = readtable('./data/kospi_code.csv','FileEncoding', 'UTF-8');
data
clc
data = readtable(['./data/kospi_code.csv]','FileEncoding', 'UTF-8');
data = readtable(['./data/kospi_code.csv]','FileEncoding', 'UTF-8']);
data = readtable(['./data/kospi_code.csv'],'FileEncoding', 'UTF-8']);
data = readtable(['./data/kospi_code.csv'],'FileEncoding', 'UTF-8');
edit code_list.m
data
data{1}
data(1)
summary(data)
data.x000120_KS
data.x000120_KS{1}
length(data.x000120_KS)
[filepath,name,ext] = fileparts(data.x000120_KS{1})
summry(data)
summary(data)
code_list
code_type
save('code.mat', 'code_num', 'code_type');
xcorr_anal
find(code_num == best_stock(i))
xcorr_anal
code_list
xcorr_anal
S
size(S)
xcorr_anal
%-- 2018-08-31 오후 2:44 --%
xcorr_anal
print -meta
help print
print
print -dmeta -noui
xcorr_anal
print -dmeta -noui
xcorr_anal
print -dmeta -noui
xcorr_anal
print -dmeta -noui
xcorr_anal
size(C1)
plot(C1)
plot(lag1,C1,'k')
xcorr_anal
xcorr_anal
xcorr_anal
code(i)
code_name{code_num == code(i)}
sum(code_num == code(i))
xcorr_anal
i
xcorr_anal
print -dmeta -noui
xcorr_anal
print -dmeta -noui
uiopen('C:\Users\minyoung\Desktop\m_tree\git_hub\m_tree\src\kospi_db.py',1)
%-- 2018-09-02 오후 1:01 --%